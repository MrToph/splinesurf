{"ts":1344692020897,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Game.Level = new Class({\r\n    initialize: function(spline){\r\n        this.blockables = [];\r\n        this.powerups = [];\r\n        this.spline = this.buildSpline();\r\n    },\r\n    \r\n    handleSingleTick: function(){\r\n        \r\n    },\r\n    \r\n    handleCamera: function(){\r\n          \r\n    },\r\n    \r\n    alignBlockables: function(dir){\r\n          \r\n    },\r\n    \r\n    buildSpline: function(){\r\n          return null;\r\n    },\r\n    \r\n    buildMeshFromGeometry: function(geometry, color){\r\n        var tubeMesh = THREE.SceneUtils.createMultiMaterialObject(geometry, [\r\n\t\t    new THREE.MeshLambertMaterial({\r\n\t\t\t\t\t\tcolor: color,\r\n\t\t\t\t\t\topacity: (geometry.debug) ? 0.2 : 0.8,\r\n\t\t\t\t\t\ttransparent: true\r\n\t\t\t\t\t}),\r\n\t\t    new THREE.MeshBasicMaterial({\r\n\t\t\t\t\t\tcolor: 0x000000,\r\n\t\t\t\t\t\topacity: 0.5,\r\n\t\t\t\t\t\twireframe: true\r\n\t\t    })\r\n        ]);\r\n\r\n\t\tif (geometry.debug) tubeMesh.add(geometry.debug);  \r\n        return tubeMesh;\r\n    }\r\n});\r\n\r\nGame.Level1 = new Class({\r\n    Extends: Game.Level,\r\n    initialize: function(){\r\n        this.parent();\r\n    },\r\n    \r\n    buildSpline: function(){\r\n        this.extrudePath = new THREE.Curve();\r\n        this.extrudePath.getPoint = function(t) {\r\n\r\n    \tvar p = 2,\r\n\t\t\tq = 5;\r\n\t\tt *= Math.PI * 2;\r\n\t\tvar tx = (2 + Math.cos(q * t)) * Math.cos(p * t),\r\n\t\t\tty = (2 + Math.cos(q * t)) * Math.sin(p * t),\r\n\t\t\ttz = Math.sin(q * t);\r\n\r\n\t\treturn new THREE.Vector3(tx, ty, tz).multiplyScalar(50.0/3);\r\n\r\n\t}\r\n    \r\n    \r\n//        this.extrudePath = THREE.Curve.create( function(){},                        \r\n//     function(t) {\r\n//\t    t = 2 * Math.PI * t;\r\n//\r\n//\t    var x = -0.22 * cos(t) - 1.28 * sin(t) - 0.44 * cos(3 * t) - 0.78 * sin(3 * t);\r\n//\t    var y = -0.1 * cos(2 * t) - 0.27 * sin(2 * t) + 0.38 * cos(4 * t) + 0.46 * sin(4 * t);\r\n//\t    var z = 0.7 * cos(3 * t) - 0.4 * sin(3 * t);\r\n//\t    return new THREE.Vector3(x, y, z).multiplyScalar(20);\r\n//\t}\r\n//);\r\n        //this.extrudePath = new THREE.SplineCurve3();\r\n       \r\n\t    var geometry = new THREE.TubeGeometry(this.extrudePath, 400/*segments*/, 2/*?*/, 6/*radiusSegments*/, true/*closed2*/, false/*debug*/);\r\n        return this.buildMeshFromGeometry(geometry, 0x0000ff);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":2183}]],"length":2183}
{"contributors":[],"silentsave":false,"ts":1344814405957,"patch":[[{"diffs":[[0,"0.2 : 0."],[-1,"8"],[1,"5"],[0,",\r\n\t\t\t\t\t"]],"start1":653,"start2":653,"length1":17,"length2":17},{"diffs":[[0,"or: "],[-1,"0x000000"],[1,"color"],[0,",\r\n\t"]],"start1":746,"start2":746,"length1":16,"length2":13},{"diffs":[[0,"n(t) {\r\n"],[-1,"\r\n"],[1,"    "],[0,"    \tvar"]],"start1":1162,"start2":1162,"length1":18,"length2":20},{"diffs":[[0,"p = 2,\r\n"],[1,"    "],[0,"\t\t\tq = 5"]],"start1":1183,"start2":1183,"length1":16,"length2":20},{"diffs":[[0,"q = 5;\r\n"],[1,"    "],[0,"\t\tt *= M"]],"start1":1198,"start2":1198,"length1":16,"length2":20},{"diffs":[[0,"I * 2;\r\n"],[1,"    "],[0,"\t\tvar tx"]],"start1":1223,"start2":1223,"length1":16,"length2":20},{"diffs":[[0,"os(p * t),\r\n"],[1,"    "],[0,"\t\t\tty = (2 +"]],"start1":1276,"start2":1276,"length1":24,"length2":28},{"diffs":[[0," * t),\r\n"],[1,"    "],[0,"\t\t\ttz = "]],"start1":1334,"start2":1334,"length1":16,"length2":20},{"diffs":[[0," * t);\r\n"],[-1,"\r\n"],[1,"    \r\n    "],[0,"\t\treturn"]],"start1":1364,"start2":1364,"length1":18,"length2":26},{"diffs":[[0,");\r\n"],[-1,"\r\n"],[1,"    "],[0,"\t}\r\n    "],[-1,"\r\n "],[0,"   \r\n"],[-1,"//"],[1,"\t"],[0,"    "],[-1,"    this.extrudePath = THREE.Curve.create( function(){},"],[1,"var geometry = new THREE.TubeGeometry(this.extrudePath, 1000/*segments*/, 2/*radius*/, 3/*radiusSegments*/, true/*closed2*/, false/*debug*/);\r\n        return this.buildMeshFromGeometry(geometry, 0x0000ff);\r\n    }\r\n});\r\n\r\nGame.Level2 = new Class({\r\n    Extends: Game.Level,\r\n    initialize: function(){\r\n        this.parent();\r\n    },\r\n"],[0,"    "],[1,"\r\n"],[0,"    "],[-1,"                \r\n//    "],[1,"buildSpline: function(){\r\n        this.extrudePath = new THREE.Curve();\r\n        this.extrudePath.getPoint ="],[0," fun"]],"start1":1442,"start2":1442,"length1":120,"length2":483},{"diffs":[[0," {\r\n"],[-1,"//\t"],[1,"        "],[0,"    t "],[1,"*"],[0,"= 2 "]],"start1":1933,"start2":1933,"length1":17,"length2":23},{"diffs":[[0,"h.PI"],[-1," * t;\r\n//\r\n//\t"],[1,";\r\n        "],[0,"    var "],[1,"t"],[0,"x = "],[-1,"-0.22 * cos(t) - 1.28 * sin(t) - 0.44 * cos(3 * t) - 0.78 * sin(3 * t);\r\n//\t    "],[1,"16 * Math.pow(Math.sin(t), 3);\r\n        \t"],[0,"var "],[1,"t"],[0,"y = "],[-1,"-0.1 * cos(2 * t) - 0.27 * sin(2 * t) + 0.38 * "],[1,"13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math."],[0,"cos("],[-1,"4"],[1,"3"],[0," * t) "],[-1,"+ 0.46 * sin(4 * t);\r\n//\t    var z = 0.7 * cos(3 * t) - 0.4 * sin(3 * t);\r\n//\t    "],[1,"- Math.cos(4 * t), tz = 0;\r\n        \r\n        \t"],[0,"retu"]],"start1":1961,"start2":1961,"length1":262,"length2":190},{"diffs":[[0,"or3("],[1,"t"],[0,"x, "],[1,"t"],[0,"y, "],[1,"t"],[0,"z).m"]],"start1":2168,"start2":2168,"length1":14,"length2":17},{"diffs":[[0,"lar("],[-1,"20);\r\n//\t}\r\n//);\r\n        //this.extrudePath = new THREE.SplineCurve3();"],[1,"50.0/16);\r\n        \r\n        }"],[0,"\r\n  "]],"start1":2195,"start2":2195,"length1":80,"length2":38},{"diffs":[[0,"dePath, "],[-1,"4"],[1,"3"],[0,"00/*segm"]],"start1":2293,"start2":2293,"length1":17,"length2":17},{"diffs":[[0,"*/, "],[-1,"2/*?"],[1,"1/*radius"],[0,"*/, "],[-1,"6"],[1,"3"],[0,"/*ra"]],"start1":2314,"start2":2314,"length1":17,"length2":22}]],"length":2473,"saved":false}
{"ts":1344814617899,"patch":[[{"diffs":[[0," var geo"],[1,"m = this.spline.children[0].geometry;"],[0,"\r\n    }\r"]],"start1":1794,"start2":1794,"length1":16,"length2":53}]],"length":2639,"saved":false}
{"ts":1344814662353,"patch":[[{"diffs":[[0,"metry;\r\n"],[1,"        var path = geom.path;\r\n        \r\n"],[0,"    }\r\n}"]],"start1":1833,"start2":1833,"length1":16,"length2":57}]],"length":2680,"saved":false}
{"ts":1344814880506,"patch":[[{"diffs":[[0,"tiplyScalar("],[-1,"5"],[1,"3"],[0,"0.0/3);\r\n   "]],"start1":1457,"start2":1457,"length1":25,"length2":25},{"diffs":[[0,"ents*/, "],[-1,"2"],[1,"1"],[0,"/*radius"]],"start1":1567,"start2":1567,"length1":17,"length2":17},{"diffs":[[0,"/, 1/*radius*/, "],[-1,"3"],[1,"4"],[0,"/*radiusSegments"]],"start1":1572,"start2":1572,"length1":33,"length2":33}]],"length":2781,"saved":false}
{"ts":1344815034110,"patch":[[{"diffs":[[0,"dius*/, "],[-1,"4"],[1,"5"],[0,"/*radius"]],"start1":1580,"start2":1580,"length1":17,"length2":17}]],"length":2781,"saved":false}
{"ts":1344815341076,"patch":[[{"diffs":[[0,"dius*/, "],[-1,"5"],[1,"6"],[0,"/*radius"]],"start1":1580,"start2":1580,"length1":17,"length2":17}]],"length":2781,"saved":false}
{"contributors":[],"silentsave":false,"ts":1344939300555,"patch":[[{"diffs":[[1,"Game.Level = new Class({\r\n    initialize: function(spline){\r\n        this.blockables = [];\r\n        this.powerups = [];\r\n        this.spline = this.buildSpline();\r\n        this.buildBlockables();\r\n    },\r\n    \r\n    handleSingleTick: function(){\r\n        \r\n    },\r\n    \r\n    handleCamera: function(){\r\n          \r\n    },\r\n    \r\n    alignBlockables: function(dir){\r\n          \r\n    },\r\n    \r\n    buildSpline: function(){\r\n          return null;\r\n    },\r\n    \r\n    buildMeshFromGeometry: function(geometry, color){\r\n        var tubeMesh = THREE.SceneUtils.createMultiMaterialObject(geometry, [\r\n\t\t    new THREE.MeshLambertMaterial({\r\n\t\t\t\t\t\tcolor: color,\r\n\t\t\t\t\t\topacity: (geometry.debug) ? 0.2 : 0.5,\r\n\t\t\t\t\t\ttransparent: true\r\n\t\t\t\t\t}),\r\n\t\t    new THREE.MeshBasicMaterial({\r\n\t\t\t\t\t\tcolor: color,\r\n\t\t\t\t\t\topacity: 0.5,\r\n\t\t\t\t\t\twireframe: true,\r\n                        transparent: true\r\n\t\t    })\r\n        ]);\r\n\r\n\t\tif (geometry.debug) tubeMesh.add(geometry.debug);  \r\n        return tubeMesh;\r\n    },\r\n    \r\n    buildBlockables: function(){\r\n        //this.material = new THREE.MeshPhongMaterial({color: 0xff0000, opacity: 0.8, wireframe: false, transparent: true});\r\n        this.material = new THREE.MeshBasicMaterial({color: 0xff0000});\r\n        this.blockables = [];\r\n        var geom = this.spline.children[0].geometry;\r\n        var path = geom.path;\r\n        var segments = geom.segments;\r\n        var segmentsRadius = geom.segmentsRadius;\r\n        var cylinderGeom = new THREE.CylinderGeometry( geom.radius/*radiusTop*/, geom.radius/*radiusBottom*/, 0.1/*height*/, segmentsRadius/*segmentsRadius*/, 1/*segmentsHeight*/, false/*openEnded*/ );\r\n        var availablePositions = [];\r\n        for(var j = 0; j < segmentsRadius; j++){\r\n            availablePositions.push(j);    \r\n        }\r\n        \r\n        for(var i = 0; i < segments; i++){\r\n            var directions = availablePositions.clone();\r\n            Game.Utils.arrayShuffle(directions);\r\n            \r\n            var rnd = Math.random();\r\n            if(rnd < 0.0015){\r\n                directions = directions.slice(0, -1);        // extract array from 0 to the second last (-1 = 1 counting from tail)  \r\n            }\r\n            else if(rnd < 0.005){\r\n                directions = directions.slice(0, -2);\r\n            }\r\n            else if(rnd < 0.01){\r\n                directions = directions.slice(0, -3);\r\n            }\r\n            else if(rnd < 0.02){\r\n                directions = directions.slice(0, -4);\r\n            }\r\n            else if(rnd < 0.025){\r\n                directions = directions.slice(0, -5);\r\n            }\r\n            else{\r\n                directions = [];   \r\n            }\r\n            \r\n            if(directions.length > 0){\r\n                var arcLengthPos = i/segments;\r\n                var pos = path.getPointAt(arcLengthPos);\r\n                var tangent = geom.tangents[i], normal = geom.normals[i], binormal = geom.binormals[i];\r\n                directions.each(function(dir, index){\r\n                    var obj = new THREE.Object3D();\r\n                    var mesh = new THREE.Mesh(cylinderGeom, this.material);\r\n                    mesh.rotation.x = 1.5*Math.PI;\r\n                    mesh.rotation.z = Math.PI/2;\r\n                    obj.add(mesh);\r\n                            \r\n                    // move in dir on spline\r\n                    var dirVector = Game.Utils.getVectorByDir(binormal, normal, dir, segmentsRadius);\r\n                    var offPos = pos.clone().addSelf(dirVector.normalize().multiplyScalar(1.75*geom.radius));\r\n                    obj.position.set(offPos.x, offPos.y, offPos.z);\r\n                            \r\n                    // rotate it correctly on spline\r\n                    var m = new THREE.Matrix4(tangent.x, normal.x, binormal.x, 0,\r\n                                                tangent.y, normal.y, binormal.y, 0,\r\n                                                tangent.z, normal.z, binormal.z);\r\n                    obj.rotation.getRotationFromMatrix(m);\r\n                            \r\n                    representation.scene.add(obj);\r\n                    this.blockables.push(obj);\r\n                }, this);\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nGame.Level1 = new Class({\r\n    Extends: Game.Level,\r\n    initialize: function(){\r\n        this.parent();\r\n    },\r\n    \r\n    buildSpline: function(){\r\n        var extrudePath = new THREE.Curve();\r\n        extrudePath.getPoint = function(t) {\r\n        \tvar p = 2,\r\n    \t\t\tq = 5;\r\n    \t\tt *= Math.PI * 2;\r\n    \t\tvar tx = (2 + Math.cos(q * t)) * Math.cos(p * t),\r\n    \t\t\tty = (2 + Math.cos(q * t)) * Math.sin(p * t),\r\n    \t\t\ttz = Math.sin(q * t);\r\n    \r\n    \t\treturn new THREE.Vector3(tx, ty, tz).multiplyScalar(30.0/3);\r\n    \t}\r\n       \r\n\t    var geometry = new THREE.TubeGeometry(extrudePath, 100/*segments*/, 1/*radius*/, 6/*radiusSegments*/, true/*closed2*/, false/*debug*/);\r\n        return this.buildMeshFromGeometry(geometry, Math.random() * 0xffffff);\r\n    }\r\n});\r\n\r\nGame.Level2 = new Class({\r\n    Extends: Game.Level,\r\n    initialize: function(){\r\n        this.parent();\r\n    },\r\n    \r\n    buildSpline: function(){\r\n        this.extrudePath = new THREE.Curve();\r\n        this.extrudePath.getPoint = function(t) {\r\n            t *= 2 * Math.PI;\r\n            var tx = 16 * Math.pow(Math.sin(t), 3);\r\n        \tvar ty = 13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t), tz = 0;\r\n        \r\n        \treturn new THREE.Vector3(tx, ty, tz).multiplyScalar(50.0/16);\r\n        \r\n        }\r\n       \r\n\t    var geometry = new THREE.TubeGeometry(this.extrudePath, 300/*segments*/, 1/*radius*/, 6/*radiusSegments*/, true/*closed2*/, false/*debug*/);\r\n        return this.buildMeshFromGeometry(geometry, 0x0000ff);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":5763}]],"length":5763,"saved":false}
{"contributors":[],"silentsave":false,"ts":1344939302512,"patch":[[{"diffs":[[0,"ath, 100"],[1,"0"],[0,"/*segmen"]],"start1":4794,"start2":4794,"length1":16,"length2":17},{"diffs":[[0,"lse/*debug*/);\r\n"],[-1,""],[0,"        return t"]],"start1":4870,"start2":4870,"length1":32,"length2":32},{"diffs":[[0,"    }\r\n       \r\n"],[1,""],[0,"\t    var geometr"]],"start1":5515,"start2":5515,"length1":32,"length2":32},{"diffs":[[0,"\r\n\r\n"],[-1,"Game.Level = new Class({\r\n    initialize: function(spline){\r\n        this.blockables = [];\r\n        this.powerups = [];\r\n        this.spline = this.buildSpline();\r\n    },\r\n    \r\n    handleSingleTick: function(){\r\n        \r\n    },\r\n    \r\n    handleCamera: function(){\r\n          \r\n    },\r\n    \r\n    alignBlockables: function(dir){\r\n          \r\n    },\r\n    \r\n    buildSpline: function(){\r\n          return null;\r\n    },\r\n    \r\n    buildMeshFromGeometry: function(geometry, color){\r\n        var tubeMesh = THREE.SceneUtils.createMultiMaterialObject(geometry, [\r\n\t\t    new THREE.MeshLambertMaterial({\r\n\t\t\t\t\t\tcolor: color,\r\n\t\t\t\t\t\topacity: (geometry.debug) ? 0.2 : 0.5,\r\n\t\t\t\t\t\ttransparent: true\r\n\t\t\t\t\t}),\r\n\t\t    new THREE.MeshBasicMaterial({\r\n\t\t\t\t\t\tcolor: color,\r\n\t\t\t\t\t\topacity: 0.5,\r\n\t\t\t\t\t\twireframe: true\r\n\t\t    })\r\n        ]);\r\n\r\n\t\tif (geometry.debug) tubeMesh.add(geometry.debug);  \r\n        return tubeMesh;\r\n    }\r\n});\r\n\r\nGame.Level1 = new Class({\r\n    Extends: Game.Level,\r\n    initialize: function(){\r\n        this.parent();\r\n    },\r\n    \r\n    buildSpline: function(){\r\n        this.extrudePath = new THREE.Curve();\r\n        this.extrudePath.getPoint = function(t) {\r\n        \tvar p = 2,\r\n    \t\t\tq = 5;\r\n    \t\tt *= Math.PI * 2;\r\n    \t\tvar tx = (2 + Math.cos(q * t)) * Math.cos(p * t),\r\n    \t\t\tty = (2 + Math.cos(q * t)) * Math.sin(p * t),\r\n    \t\t\ttz = Math.sin(q * t);\r\n    \r\n    \t\treturn new THREE.Vector3(tx, ty, tz).multiplyScalar(30.0/3);\r\n    \t}\r\n       \r\n\t    var geometry = new THREE.TubeGeometry(this.extrudePath, 1000/*segments*/, 1/*radius*/, 6/*radiusSegments*/, true/*closed2*/, false/*debug*/);\r\n        return this.buildMeshFromGeometry(geometry, 0x0000ff);\r\n    }\r\n});\r\n\r\nGame.Level2 = new Class({\r\n    Extends: Game.Level,\r\n    initialize: function(){\r\n        this.parent();\r\n    },m = this.spline.children[0].geometry;\r\n        var path = geom.path;\r\n        \r\n    \r\n    buildSpline: function(){\r\n        this.extrudePath = new THREE.Curve();\r\n        this.extrudePath.getPoint = function(t) {\r\n            t *= 2 * Math.PI;\r\n            var tx = 16 * Math.pow(Math.sin(t), 3);\r\n        \tvar ty = 13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t), tz = 0;\r\n        \r\n        \treturn new THREE.Vector3(tx, ty, tz).multiplyScalar(50.0/16);\r\n        \r\n        }\r\n       \r\n\t    var geometry = new THREE.TubeGeometry(this.extrudePath, 300/*segments*/, 1/*radius*/, 3/*radiusSegments*/, true/*closed2*/, false/*debug*/);\r\n        return this.buildMeshFromGeometry(geometry, 0x0000ff);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n"]],"start1":5760,"start2":5760,"length1":2555,"length2":4}]],"length":5764,"saved":false}
{"contributors":[],"silentsave":false,"ts":1353022749814,"patch":[[{"diffs":[[0,"ngth > 0){\r\n"],[1,"                var objects = [];\r\n                \r\n"],[0,"            "]],"start1":2711,"start2":2711,"length1":24,"length2":77},{"diffs":[[0,"    "],[-1,"this.blockables.push"],[1,"objects[dir] = "],[0,"(obj);"],[1," "],[0,"\r\n  "]],"start1":4162,"start2":4162,"length1":34,"length2":30},{"diffs":[[0," }, this);\r\n"],[1,"                this.blockables[i] = objects;\r\n"],[0,"            "]],"start1":4205,"start2":4205,"length1":24,"length2":71},{"diffs":[[0,"ath, 100"],[-1,"0"],[0,"/*segmen"]],"start1":4890,"start2":4890,"length1":17,"length2":16}]],"length":5859,"saved":false}
