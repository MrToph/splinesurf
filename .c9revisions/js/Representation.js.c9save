{"ts":1344705012821,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Game.Representation = new Class({\n    Implements: Events,\n    initialize: function(model){\n        this.model = model;\n        // init the WebGL renderer and append it to the Dom\n        this.renderer = new THREE.WebGLRenderer({\n    \t\tantialias\t: true\n    \t});\n    \tthis.renderer.setSize( window.innerWidth, window.innerHeight );\n    \n    \n        // create the Scene\n    \tthis.scene = new THREE.Scene();\n    \tvar directionalLight = new THREE.DirectionalLight( 0xffffff );\n        directionalLight.position.set( 1, 0, 1 ).normalize();\n        this.scene.add( directionalLight );\n        var directionalLight = new THREE.DirectionalLight( 0xffffff );\n        directionalLight.position.set( 0, 1, -1 ).normalize();\n        this.scene.add( directionalLight );\n        \n        this.camera = this.model.getCamera();\n        //add camera to scene\n        this.scene.add(this.camera);\n\t\n        WindowResize(this.renderer, this.camera);\n       // this.scene.fog = new THREE.Fog( 0x000000, 150, 1600 );\n        //this.renderer.setClearColor( this.scene.fog.color, 1 );\t\t// no need\n    \t//this.renderer.autoClear = false;\t\t\t\t\t\t\t// no need\n        \n        // create the sphere's material\n        var sphereMaterial = new THREE.MeshPhongMaterial({\n            color: 0xff0000, wireframe: true});\n        // set up the sphere vars\n        var radius = 50,\n            segments = 16,\n            rings = 16;\n        \n        // create a new mesh with\n        // sphere geometry - we will cover\n        // the sphereMaterial next!\n        this.sphere = new THREE.Mesh(\n        \n          new THREE.SphereGeometry(\n            radius,\n            segments,\n            rings),\n        \n          sphereMaterial);\n        \n        // add the sphere to the scene\n        this.scene.add(this.sphere);\n    },\n    \n    endLevelAnim: function(){\n        this.fireEvent('endLevelAnimFinished');  \n    },\n    \n    nextLevelAnim: function(){\n        this.fireEvent('nextLevelAnimFinished');  \n    },\n    \n    render: function(){\n        this.renderer.render( this.scene, this.camera );\n    },\n    \n    getRendererDOM: function(){\n        return this.renderer.domElement;   \n    }\n});"]],"start1":0,"start2":0,"length1":0,"length2":2161}]],"length":2161}
{"contributors":[],"silentsave":false,"ts":1344814252339,"patch":[[{"diffs":[[1,"Game.Representation = new Class({\n    Implements: Events,\n    initialize: function(model){\n        this.model = model;\n        // init the WebGL renderer and append it to the Dom\n        this.renderer = new THREE.WebGLRenderer({\n    \t\tantialias\t: true\n    \t});\n    \tthis.renderer.setSize( window.innerWidth, window.innerHeight );\n    \n    \n        // create the Scene\n    \tthis.scene = new THREE.Scene();\n    \tvar directionalLight = new THREE.DirectionalLight( 0xffffff );\n        directionalLight.position.set( 1, 0, 1 ).normalize();\n        this.scene.add( directionalLight );\n        var directionalLight = new THREE.DirectionalLight( 0xffffff );\n        directionalLight.position.set( 0, 1, -1 ).normalize();\n        this.scene.add( directionalLight );\n        \n        this.camera = this.model.getCamera();\n        //add camera to scene\n        this.scene.add(this.camera);\n\t\n        WindowResize(this.renderer, this.camera);\n        this.scene.fog = new THREE.Fog( 0xffffff, 1, 40 );\n        this.renderer.setClearColor( this.scene.fog.color, 1 );\t\t// no need\n    \t//this.renderer.autoClear = false;\t\t\t\t\t\t\t// no need\n    },\n    \n    endLevelAnim: function(){\n        this.fireEvent('endLevelAnimFinished');  \n    },\n    \n    nextLevelAnim: function(){\n        this.fireEvent('nextLevelAnimFinished');  \n    },\n    \n    render: function(){\n        this.renderer.render( this.scene, this.camera );\n    },\n    \n    getRendererDOM: function(){\n        return this.renderer.domElement;   \n    }\n});"]],"start1":0,"start2":0,"length1":0,"length2":1499}]],"length":1499,"saved":false}
{"contributors":[],"silentsave":false,"ts":1353022675894,"patch":[[{"diffs":[[0,"REE."],[-1,"WebGLRenderer({\n    \t\tantialias\t: true\n    \t});\n    \tthis.renderer.setSize( window.innerWidth, window.innerHeight );\n    \n    \n        // create the Scene\n    \tthis.scene = new THREE.Scene();\n    \tvar directionalLight = new THREE.DirectionalLight( 0xffffff );\n        directionalLight.position.set( 1, 0, 1 ).normalize();\n        this.scene.add( directionalLight );\n        var directionalLight = new THREE.DirectionalLight( 0xffffff );\n        directionalLight.position.set( 0, 1, -1 ).normalize();\n        this.scene.add( directionalLight );\n        \n        this.camera = this.model.getCamera();\n        //add camera to scene\n        this.scene.add(this.camera);\n\t\n        WindowResize(this.renderer, this.camera);\n        this.scene.fog = new THREE.Fog( 0xffffff, 1, 40 );\n        this.renderer.setClearColor( this.scene.fog.color, 1 );\t\t// no need\n    \t//this.renderer.autoClear = false;\t\t\t\t\t\t\t// no need\n    },\n    \n    endLevelAnim: function(){\n        this.fireEvent('endLevelAnimFinished');  \n    },\n    \n    nextLevelAnim: function(){\n        this.fireEvent('nextLevelAnimFinished');  \n    },\n    \n    render: function(){\n        this.renderer.render( this.scene, this.camera );\n    },\n    \n    getRendererDOM: function(){\n        return this.renderer.domElement;   \n    }\n});Game.Representation = new Class({\n    Implements: Events,\n    initialize: function(model){\n        this.model = model;\n        // init the WebGL renderer and append it to the Dom\n        this.renderer = new THREE.WebGL"],[1,"Canvas"],[0,"Rend"]],"start1":209,"start2":209,"length1":1512,"length2":14},{"diffs":[[0,"\n       "],[-1,"//"],[0," this.sc"]],"start1":931,"start2":931,"length1":18,"length2":16},{"diffs":[[0,"0, 1"],[-1,"50, 160"],[1,", 4"],[0,"0 );"]],"start1":979,"start2":979,"length1":15,"length2":11},{"diffs":[[0,"        "],[-1,"//"],[0,"this.ren"]],"start1":991,"start2":991,"length1":18,"length2":16},{"diffs":[[0,"or, 1 );"],[-1,"\t\t// no need"],[0,"\n    \t//"]],"start1":1046,"start2":1046,"length1":28,"length2":16},{"diffs":[[0,"eed\n"],[-1,"        \n        // create the sphere's material\n        var sphereMaterial = new THREE.MeshPhongMaterial({\n            color: 0xff0000, wireframe: true});\n        // set up the sphere vars\n        var radius = 50,\n            segments = 16,\n            rings = 16;\n        \n        // create a new mesh with\n        // sphere geometry - we will cover\n        // the sphereMaterial next!\n        this.sphere = new THREE.Mesh(\n        \n          new THREE.SphereGeometry(\n            radius,\n            segments,\n            rings),\n        \n          sphereMaterial);\n        \n        // add the sphere to the scene\n        this.scene.add(this.sphere);\n"],[0,"    "]],"start1":1108,"start2":1108,"length1":662,"length2":8}]],"length":1488,"saved":false}
