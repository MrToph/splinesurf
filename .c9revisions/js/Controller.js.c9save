{"ts":1344705013265,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Game.Controller = new Class({\r\n    initialize: function(model){\r\n       // init Model\r\n       this.model = model;\r\n       this.running = false;\r\n       \r\n       // representation is a global var\r\n       representation.addEvent('endLevelAnimFinished', this.onEndLevelAnimFinished);\r\n       representation.addEvent('nextLevelAnimFinished', this.onNextLevelAnimFinished);\r\n    },\r\n    \r\n    handleTicks: function(frames){\r\n        \r\n        // set players mesh accordingly\r\n        this.model.player.alignPlayer();\r\n        \r\n        // check if we hit next level\r\n        if(false){\r\n            this.running = false;\r\n            representation.endLevelAnim();    \r\n        }\r\n    },\r\n    \r\n    handleKeyboard: function(){\r\n          \r\n    },\r\n    \r\n    collisionDetect: function(){\r\n          \r\n    },\r\n    \r\n    restartLevel: function(){\r\n          \r\n    },\r\n    \r\n    onEndLevelAnimFinished: function(){\r\n        var tmp = this.model.curLevel;\r\n        if(tmp !== null){\r\n           representation.scene.remove(tmp.spline); \r\n        }\r\n        \r\n        // init next level\r\n        this.model.initNextLevel();\r\n        tmp = this.model.curLevel.spline;\r\n        representation.scene.add(tmp); \r\n        console.log(tmp);\r\n        \r\n        representation.nextLevelAnim();\r\n    },\r\n    \r\n    onNextLevelAnimFinished: function(){\r\n          this.running = true;\r\n    }\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":1374}]],"length":1374}
